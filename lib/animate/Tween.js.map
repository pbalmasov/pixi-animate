{"version":3,"sources":["../../src/animate/Tween.js"],"names":["Tween","target","startProps","endProps","startFrame","duration","ease","endFrame","isTweenlessFrame","prop","hasOwnProperty","setPosition","currentFrame","setToEnd","time","lerp","props","setPropFromShorthand","lerpValue","start","end","t","x","y","sx","sy","kx","ky","r","lerpRotation","a","v","c","m","g","PI","Math","TWO_PI","difference","abs","value","transform","position","scale","skew","rotation","alpha","i","apply","visible","ma"],"mappings":"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","file":"Tween.js","sourcesContent":["/**\r\n * Provide timeline playback of movieclip\r\n * @memberof PIXI.animate\r\n * @class Tween\r\n * @constructor\r\n * @param {PIXI.animate.MovieClip} target The target to play\r\n * @param {Object} startProps The starting properties\r\n * @param {Object} endProps The ending properties\r\n * @param {int} startFrame frame number on which to begin tweening\r\n * @param {int} duration Number of frames to tween\r\n * @param {Function} [ease] Ease function to use\r\n */\r\n\r\nclass Tween {\r\n\r\n    constructor(target, startProps, endProps, startFrame, duration, ease) {\r\n\r\n        /**\r\n         * target display object\r\n         * @name PIXI.animate.Tween#target\r\n         * @type {Object}\r\n         */\r\n        this.target = target;\r\n\r\n        /**\r\n         * properties at the start of the tween\r\n         * @type {Object}\r\n         * @name PIXI.animate.Tween#startProps\r\n         */\r\n        this.startProps = startProps;\r\n\r\n        /**\r\n         * properties at the end of the tween, as well as any properties that are set\r\n         * instead of tweened\r\n         * @type {Object}\r\n         * @name PIXI.animate.Tween#endProps\r\n         */\r\n        this.endProps = {};\r\n\r\n        /**\r\n         * duration of tween in frames. For a keyframe with no tweening, the duration will be 0.\r\n         * @type {int}\r\n         * @name PIXI.animate.Tween#duration\r\n         */\r\n        this.duration = duration;\r\n\r\n        /**\r\n         * The frame that the tween starts on\r\n         * @type {int}\r\n         * @name PIXI.animate.Tween#startFrame\r\n         */\r\n        this.startFrame = startFrame;\r\n\r\n        /**\r\n         * the frame that the tween ends on\r\n         * @type {int}\r\n         * @name PIXI.animate.Tween#endFrame\r\n         */\r\n        this.endFrame = startFrame + duration;\r\n\r\n        /**\r\n         * easing function to use, if any\r\n         * @type {Function}\r\n         * @name PIXI.animate.Tween#ease\r\n         */\r\n        this.ease = ease;\r\n\r\n        /**\r\n         * If we don't tween.\r\n         * @type {Boolean}\r\n         * @name PIXI.animate.Tween#isTweenlessFrame\r\n         */\r\n        this.isTweenlessFrame = !endProps;\r\n\r\n\r\n        let prop;\r\n        if (endProps) {\r\n            //make a copy to safely include any unchanged values from the start of the tween\r\n            for (prop in endProps) {\r\n                this.endProps[prop] = endProps[prop];\r\n            }\r\n        }\r\n\r\n        //copy in any starting properties don't change\r\n        for (prop in startProps) {\r\n            if (!this.endProps.hasOwnProperty(prop)) {\r\n                this.endProps[prop] = startProps[prop];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the current frame.\r\n     * @method PIXI.animate.Tween#setPosition\r\n     * @param {int} currentFrame\r\n     */\r\n    setPosition(currentFrame) {\r\n        //if this is a single frame with no tweening, or at the end of the tween, then\r\n        //just speed up the process by setting values\r\n        if (currentFrame >= this.endFrame) {\r\n            this.setToEnd();\r\n            return;\r\n        }\r\n\r\n        if (this.isTweenlessFrame) {\r\n            this.setToEnd();\r\n            return;\r\n        }\r\n\r\n        let time = (currentFrame - this.startFrame) / this.duration;\r\n        if (this.ease) {\r\n            time = this.ease(time);\r\n        }\r\n        let target = this.target;\r\n        let startProps = this.startProps;\r\n        let endProps = this.endProps;\r\n        for (let prop in endProps) {\r\n            let lerp = props[prop];\r\n            if (lerp) {\r\n                setPropFromShorthand(target, prop, lerp(startProps[prop], endProps[prop], time));\r\n            } else {\r\n                setPropFromShorthand(target, prop, startProps[prop]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set to the end position\r\n     * @method PIXI.animate.Tween#setToEnd\r\n     */\r\n    setToEnd() {\r\n        let endProps = this.endProps;\r\n        let target = this.target;\r\n        for (let prop in endProps) {\r\n            setPropFromShorthand(target, prop, endProps[prop]);\r\n        }\r\n    }\r\n}\r\n\r\n//standard tweening\r\nfunction lerpValue(start, end, t) {\r\n    return start + (end - start) * t;\r\n}\r\n\r\nconst props = {\r\n    //position\r\n    x: lerpValue,\r\n    y: lerpValue,\r\n    //scale\r\n    sx: lerpValue,\r\n    sy: lerpValue,\r\n    //skew\r\n    kx: lerpValue,\r\n    ky: lerpValue,\r\n    //rotation\r\n    r: lerpRotation,\r\n    //alpha\r\n    a: lerpValue,\r\n    //tinting\r\n    // t: lerpColor,\r\n    t: null,\r\n    //values to be set\r\n    v: null, //visible\r\n    c: null, //colorTransform\r\n    m: null, //mask\r\n    g: null //not sure if we'll actually handle graphics this way?\r\n};\r\n\r\n//split r, g, b into separate values for tweening\r\n/*function lerpColor(start, end, t)\r\n{\r\n    //split start color into components\r\n    let sR = start >> 16 & 0xFF;\r\n    let sG = start >> 8 & 0xFF;\r\n    let sB = start & 0xFF;\r\n    //split end color into components\r\n    let eR = end >> 16 & 0xFF;\r\n    let eG = end >> 8 & 0xFF;\r\n    let eB = end & 0xFF;\r\n    //lerp red\r\n    let r = sR + (eR - sR) * percent;\r\n    //clamp red to valid values\r\n    if (r < 0)\r\n        r = 0;\r\n    else if (r > 255)\r\n        r = 255;\r\n    //lerp green\r\n    let g = sG + (eG - sG) * percent;\r\n    //clamp green to valid values\r\n    if (g < 0)\r\n        g = 0;\r\n    else if (g > 255)\r\n        g = 255;\r\n    //lerp blue\r\n    let b = sB + (eB - sB) * percent;\r\n    //clamp blue to valid values\r\n    if (b < 0)\r\n        b = 0;\r\n    else if (b > 255)\r\n        b = 255;\r\n\r\n    let combined = (r << 16) | (g << 8) | b;\r\n    return combined;\r\n}*/\r\n\r\nconst PI = Math.PI;\r\nconst TWO_PI = PI * 2;\r\n\r\n//handle 355 -> 5 degrees only going through a 10 degree change instead of\r\n//the long way around\r\n//Math from http://stackoverflow.com/a/2708740\r\nfunction lerpRotation(start, end, t) {\r\n    let difference = Math.abs(end - start);\r\n    if (difference > PI) {\r\n        // We need to add on to one of the values.\r\n        if (end > start) {\r\n            // We'll add it on to start...\r\n            start += TWO_PI;\r\n        } else {\r\n            // Add it on to end.\r\n            end += PI + TWO_PI;\r\n        }\r\n    }\r\n\r\n    // Interpolate it.\r\n    let value = (start + ((end - start) * t));\r\n\r\n    // wrap to 0-2PI\r\n    /*if (value >= 0 && value <= TWO_PI)\r\n        return value;\r\n    return value % TWO_PI;*/\r\n\r\n    //just return, as it's faster\r\n    return value;\r\n}\r\n\r\nfunction setPropFromShorthand(target, prop, value) {\r\n    switch (prop) {\r\n        case \"x\":\r\n            target.transform.position.x = value;\r\n            break;\r\n        case \"y\":\r\n            target.transform.position.y = value;\r\n            break;\r\n        case \"sx\":\r\n            target.transform.scale.x = value;\r\n            break;\r\n        case \"sy\":\r\n            target.transform.scale.y = value;\r\n            break;\r\n        case \"kx\":\r\n            target.transform.skew.x = value;\r\n            break;\r\n        case \"ky\":\r\n            target.transform.skew.y = value;\r\n            break;\r\n        case \"r\":\r\n            target.transform.rotation = value;\r\n            break;\r\n        case \"a\":\r\n            target.alpha = value;\r\n            break;\r\n        case \"t\":\r\n            target.i(value); // i = setTint\r\n            break;\r\n        case \"c\":\r\n            target.c.apply(target, value); // c = setColorTransform\r\n            break;\r\n        case \"v\":\r\n            target.visible = value;\r\n            break;\r\n        case \"m\":\r\n            target.ma(value); // ma = setMask\r\n            break;\r\n    }\r\n}\r\n\r\n// Assign to namespace\r\nexport default Tween;"]}