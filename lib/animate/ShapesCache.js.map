{"version":3,"sources":["../../src/animate/ShapesCache.js"],"names":["ShapesCache","Object","defineProperty","enumerable","value","prop","items","utils","deserializeShapes","i","length","item","j","arg","hexToUint","id","name","remove"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;AAKA,IAAMA,cAAc,EAApB;;AAEA;;;;;;;AAOAC,OAAOC,cAAP,CAAsBF,WAAtB,EAAmC,KAAnC,EAA0C;AACtCG,gBAAY,KAD0B;AAEtCC,WAAO,eAASC,IAAT,EAAeC,KAAf,EAAsB;;AAEzB;AACA,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,oBAAQC,gBAAMC,iBAAN,CAAwBF,KAAxB,CAAR;AACH;;AAED;AACA,aAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIH,MAAMI,MAA1B,EAAkCD,GAAlC,EAAuC;AACnC,gBAAIE,OAAOL,MAAMG,CAAN,CAAX;AACA,iBAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAID,KAAKD,MAAzB,EAAiCE,GAAjC,EAAsC;AAClC,oBAAIC,MAAMF,KAAKC,CAAL,CAAV;AACA,oBAAI,OAAOC,GAAP,KAAe,QAAf,IAA2BA,IAAI,CAAJ,MAAW,GAA1C,EAA+C;AAC3CF,yBAAKC,CAAL,IAAUL,gBAAMO,SAAN,CAAgBD,GAAhB,CAAV;AACH;AACJ;AACJ;AACDb,oBAAYK,IAAZ,IAAoBC,KAApB;AACH;AApBqC,CAA1C;;AAwBA;;;;;;;AAOAL,OAAOC,cAAP,CAAsBF,WAAtB,EAAmC,WAAnC,EAAgD;AAC5CG,gBAAY,KADgC;AAE5CC,WAAO,eAASW,EAAT,EAAa;AAChB,eAAOf,YAAYe,EAAZ,KAAmB,IAA1B;AACH;AAJ2C,CAAhD;;AAOA;;;;;;AAMAd,OAAOC,cAAP,CAAsBF,WAAtB,EAAmC,QAAnC,EAA6C;AACzCG,gBAAY,KAD6B;AAEzCC,WAAO,eAASW,EAAT,EAAa;AAChB,YAAI,QAAOA,EAAP,yCAAOA,EAAP,OAAc,QAAlB,EAA4B;AACxB,iBAAK,IAAIC,IAAT,IAAiBD,EAAjB,EAAqB;AACjBf,4BAAYiB,MAAZ,CAAmBD,IAAnB;AACH;AACD;AACH;AACD,YAAIhB,YAAYe,EAAZ,CAAJ,EAAqB;AACjBf,wBAAYe,EAAZ,EAAgBL,MAAhB,GAAyB,CAAzB;AACA,mBAAOV,YAAYe,EAAZ,CAAP;AACH;AACJ;AAbwC,CAA7C;;AAgBA;;;;;AAKAd,OAAOC,cAAP,CAAsBF,WAAtB,EAAmC,WAAnC,EAAgD;AAC5CG,gBAAY,KADgC;AAE5CC,WAAO,iBAAW;AACd,aAAK,IAAIW,EAAT,IAAef,WAAf,EAA4B;AACxBA,wBAAYiB,MAAZ,CAAmBF,EAAnB;AACH;AACJ;AAN2C,CAAhD;;AASA;kBACef,W","file":"ShapesCache.js","sourcesContent":["import utils from './utils';\r\n\r\n/**\r\n * Contains the collection of graphics data\r\n * @memberof PIXI.animate\r\n * @class ShapesCache\r\n */\r\nconst ShapesCache = {};\r\n\r\n/**\r\n * Add an item or itesm to the cache\r\n * @method PIXI.animate.ShapesCache.add\r\n * @static\r\n * @param {String} prop  The id of graphic or the map of graphics to add\r\n * @param {String|Array<Array>} items Collection of draw commands\r\n */\r\nObject.defineProperty(ShapesCache, 'add', {\r\n    enumerable: false,\r\n    value: function(prop, items) {\r\n\r\n        // Decode string to map of files\r\n        if (typeof items === \"string\") {\r\n            items = utils.deserializeShapes(items);\r\n        }\r\n\r\n        // Convert all hex string colors (animate) to int (pixi.js)\r\n        for (let i = 0; i < items.length; i++) {\r\n            let item = items[i];\r\n            for (let j = 0; j < item.length; j++) {\r\n                let arg = item[j];\r\n                if (typeof arg === 'string' && arg[0] === '#') {\r\n                    item[j] = utils.hexToUint(arg);\r\n                }\r\n            }\r\n        }\r\n        ShapesCache[prop] = items;\r\n    }\r\n});\r\n\r\n\r\n/**\r\n * Get the graphic from cache\r\n * @method  PIXI.animate.ShapesCache.fromCache\r\n * @static\r\n * @param  {String} id The cache id\r\n * @return {Array} Series of graphic draw commands\r\n */\r\nObject.defineProperty(ShapesCache, 'fromCache', {\r\n    enumerable: false,\r\n    value: function(id) {\r\n        return ShapesCache[id] || null;\r\n    }\r\n});\r\n\r\n/**\r\n * Remove the graphic from cache\r\n * @method  PIXI.animate.ShapesCache.remove\r\n * @static\r\n * @param  {String|Object} id The cache id or map\r\n */\r\nObject.defineProperty(ShapesCache, 'remove', {\r\n    enumerable: false,\r\n    value: function(id) {\r\n        if (typeof id === \"object\") {\r\n            for (let name in id) {\r\n                ShapesCache.remove(name);\r\n            }\r\n            return;\r\n        }\r\n        if (ShapesCache[id]) {\r\n            ShapesCache[id].length = 0;\r\n            delete ShapesCache[id];\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Remove all graphics from cache\r\n * @method  PIXI.animate.ShapesCache.removeAll\r\n * @static\r\n */\r\nObject.defineProperty(ShapesCache, 'removeAll', {\r\n    enumerable: false,\r\n    value: function() {\r\n        for (let id in ShapesCache) {\r\n            ShapesCache.remove(id);\r\n        }\r\n    }\r\n});\r\n\r\n// Assign to namespace\r\nexport default ShapesCache;"]}