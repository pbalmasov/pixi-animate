{"version":3,"sources":["../../src/animate/load.js"],"names":["load","options","parent","complete","basePath","loader","metadata","stage","Object","assign","createInstance","PIXI","loaders","Loader","done","instance","addChild","assets","keys","length","id","data","default","add","once"],"mappings":";;;AAAA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAMA,OAAO,SAAPA,IAAO,CAASC,OAAT,EAAkBC,MAAlB,EAA0BC,QAA1B,EAAoCC,QAApC,EAA8CC,MAA9C,EAAsDC,QAAtD,EAAgE;;AAEzE;AACA,QAAI,OAAOJ,MAAP,KAAkB,UAAtB,EAAkC;AAC9BE,mBAAWD,QAAX;AACAA,mBAAWD,MAAX;AACAA,iBAAS,IAAT;AACH,KAJD,MAIO;AACH,YAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkC;AAC9BC,uBAAWD,QAAX;AACAA,uBAAW,IAAX;AACH;AACJ;;AAED,QAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AAC/BA,kBAAU;AACNM,mBAAON,OADD;AAENC,oBAAQA,MAFF;AAGNE,sBAAUA,YAAY,EAHhB;AAIND,sBAAUA;AAJJ,SAAV;AAMH;;AAEDF,cAAUO,OAAOC,MAAP,CAAc;AACpBF,eAAO,IADa;AAEpBL,gBAAQ,IAFY;AAGpBE,kBAAU,EAHU;AAIpBD,kBAAU,IAJU;AAKpBO,wBAAgB;AALI,KAAd,EAMPT,WAAW,EANJ,CAAV;;AAQAI,aAASA,UAAU,IAAIM,KAAKC,OAAL,CAAaC,MAAjB,EAAnB;;AAEA,aAASC,IAAT,GAAgB;AACZ,YAAIC,WAAYd,QAAQS,cAAR,IAA0B,OAAOT,QAAQM,KAAf,KAAyB,UAApD,GAAkE,IAAIN,QAAQM,KAAZ,EAAlE,GAAwF,IAAvG;AACA,YAAIN,QAAQC,MAAZ,EAAoB;AAChBD,oBAAQC,MAAR,CAAec,QAAf,CAAwBD,QAAxB;AACH;AACD,YAAId,QAAQE,QAAZ,EAAsB;AAClBF,oBAAQE,QAAR,CAAiBY,QAAjB,EAA2BV,MAA3B;AACH;AACJ;;AAED;AACA,QAAIY,SAAShB,QAAQM,KAAR,CAAcU,MAAd,IAAwB,EAArC;AACA,QAAIA,UAAUT,OAAOU,IAAP,CAAYD,MAAZ,EAAoBE,MAAlC,EAA0C;AACtC;AACA,YAAIf,YAAWH,QAAQG,QAAvB;AACA,YAAIA,SAAJ,EAAc;AACVA,yBAAY,GAAZ;AACH;AACD,aAAK,IAAIgB,EAAT,IAAeH,MAAf,EAAuB;AACnB,gBAAII,OAAO,IAAX;AACA,gBAAGf,QAAH,EAAa;AACT;AACA,oBAAGA,SAASc,EAAT,CAAH,EAAiB;AACbC,2BAAOf,SAASc,EAAT,CAAP;AACH;AACD;AAHA,qBAIK,IAAId,SAASgB,OAAb,EAAqB;AACtBD,+BAAOf,SAASgB,OAAhB;AACH;AACJ;AACDjB,mBAAOkB,GAAP,CAAWH,EAAX,EAAehB,YAAWa,OAAOG,EAAP,CAA1B,EAAsCC,IAAtC;AACH;AACDhB,eAAOmB,IAAP,CAAY,UAAZ,EAAwBV,IAAxB,EAA8Bd,IAA9B;AACH,KArBD,MAqBO;AACH;AACAc;AACH;;AAED,WAAOT,MAAP;AACH,CAxED;;kBA0EeL,I","file":"load.js","sourcesContent":["/**\r\n * Load the stage class and preload any assets\r\n * @method PIXI.animate.load\r\n * @param {Object} options Options for loading.\r\n * @param {Function} options.stage Reference to the stage class\r\n * @param {Object} [options.stage.assets] Assets used to preload\r\n * @param {PIXI.Container} options.parent The Container to auto-add the stage to.\r\n * @param {String} [options.basePath] Base root directory\r\n * @param {boolean} [options.createInstance] enable or disable automatic instantiation of stage\r\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\r\n */\r\n/**\r\n * Load the stage class and preload any assets\r\n * ```\r\n * let renderer = new PIXI.autoDetectRenderer(1280, 720);\r\n * let stage = new PIXI.Container();\r\n * PIXI.animate.load(lib.MyStage, function(instance){\r\n *     stage.addChild(instance);\r\n * });\r\n * function update() {\r\n *      renderer.render(stage);\r\n *      update();\r\n * }\r\n * update();\r\n * ```\r\n * @method PIXI.animate.load\r\n * @param {Function} StageRef Reference to the stage class.\r\n * @param {Object} [StageRef.assets] Assets used to preload.\r\n * @param {Function} complete The callback function when complete.\r\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\r\n */\r\n/**\r\n * Load the stage class and preload any assets\r\n * ```\r\n * let renderer = new PIXI.autoDetectRenderer(1280, 720);\r\n * let stage = new PIXI.Container();\r\n * PIXI.animate.load(lib.MyStage, stage);\r\n * function update() {\r\n *      renderer.render(stage);\r\n *      update();\r\n * }\r\n * update();\r\n * ```\r\n * @method PIXI.animate.load\r\n * @param {Function} StageRef Reference to the stage class.\r\n * @param {Object} [StageRef.assets] Assets used to preload.\r\n * @param {PIXI.Container} parent The Container to auto-add the stage to.\r\n * @param {String} [basePath] Base root directory\r\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\r\n */\r\n/**\r\n * Load the stage class and preload any assets\r\n * ```\r\n * let basePath = \"file:/path/to/assets\";\r\n * let renderer = new PIXI.autoDetectRenderer(1280, 720);\r\n * \r\n * let extensions = PIXI.compressedTextures.detectExtensions(renderer);\r\n * let loader = new PIXI.loaders.Loader();\r\n * // this is an example of setting up a pre loader plugin to handle compressed textures in this case\r\n * loader.pre(PIXI.compressedTextures.extensionChooser(extensions));\r\n * \r\n * // specify metadata this way if you want to provide a default loading strategy for all assets listed in the PIXI animation\r\n * let metadata = { default: { metadata: { imageMetadata: { choice: [\".crn\"] } } } };\r\n * // specify metadata this way if you want to provide a specific loading strategy for a certain asset listed inside the PIXI animation library\r\n * let metadata = { MyStage_atlas_1: { metadata: { imageMetadata: { choice: [\".crn\"] } } } };\r\n * \r\n * let stage = new PIXI.Container();\r\n * PIXI.animate.load(lib.MyStage, stage, ()=>{}, basePath, loader, metadata);\r\n * function update() {\r\n *      renderer.render(stage);\r\n *      update();\r\n * }\r\n * update();\r\n * ```\r\n * @method PIXI.animate.load\r\n * @param {Function} StageRef Reference to the stage class.\r\n * @param {Object} [StageRef.assets] Assets used to preload.\r\n * @param {PIXI.Container} parent The Container to auto-add the stage to.\r\n * @param {Function} [complete] The callback function when complete.\r\n * @param {String} [basePath] Base root directory\r\n * @param {PIXI.loaders.Loader} [loader] A Pixi loader object\r\n * @param {Object} [metadata] A metadata object for the asset being loaded\r\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\r\n */\r\n\r\nconst load = function(options, parent, complete, basePath, loader, metadata) {\r\n\r\n    // Support arguments (ref, complete, basePath)\r\n    if (typeof parent === \"function\") {\r\n        basePath = complete;\r\n        complete = parent;\r\n        parent = null;\r\n    } else {\r\n        if (typeof complete === \"string\") {\r\n            basePath = complete;\r\n            complete = null;\r\n        }\r\n    }\r\n\r\n    if (typeof options === \"function\") {\r\n        options = {\r\n            stage: options,\r\n            parent: parent,\r\n            basePath: basePath || \"\",\r\n            complete: complete\r\n        };\r\n    }\r\n\r\n    options = Object.assign({\r\n        stage: null,\r\n        parent: null,\r\n        basePath: '',\r\n        complete: null,\r\n        createInstance: true\r\n    }, options || {});\r\n\r\n    loader = loader || new PIXI.loaders.Loader();\r\n\r\n    function done() {\r\n        let instance = (options.createInstance && typeof options.stage === \"function\") ? new options.stage() : null;\r\n        if (options.parent) {\r\n            options.parent.addChild(instance);\r\n        }\r\n        if (options.complete) {\r\n            options.complete(instance, loader);\r\n        }\r\n    }\r\n\r\n    // Check for assets to preload\r\n    let assets = options.stage.assets || {};\r\n    if (assets && Object.keys(assets).length) {\r\n        // assetBaseDir can accept either with trailing slash or not\r\n        let basePath = options.basePath;\r\n        if (basePath) {\r\n            basePath += \"/\";\r\n        }\r\n        for (let id in assets) {\r\n            var data = null;\r\n            if(metadata) {\r\n                // if the metadata was supplied for this particular asset, use these options\r\n                if(metadata[id]) {\r\n                    data = metadata[id];\r\n                }\r\n                // if the metadata supplied a default option\r\n                else if (metadata.default){\r\n                    data = metadata.default;\r\n                }\r\n            }\r\n            loader.add(id, basePath + assets[id], data);\r\n        }\r\n        loader.once('complete', done).load();\r\n    } else {\r\n        // tiny case where there's only text and no shapes/animations\r\n        done();\r\n    }\r\n\r\n    return loader;\r\n};\r\n\r\nexport default load;\r\n"]}